syntax = "proto3";
option java_package = "goobly.grpc";
option objc_class_prefix = "GBLY";
option optimize_for = SPEED;
option cc_enable_arenas = true;

package goobly.consensus;


import "common.proto";

// Raft
// kudu: https://github.com/cloudera/kudu/blob/6e6be4af952fcfb75269ad362eba317965e90455/src/kudu/consensus/consensus.proto


// An id for a generic state machine operation. Composed of the leaders' term
// plus the index of the operation in that term, e.g., the <index>th operation
// of the <term>th leader.
// message OpId {
//   // The term of an operation or the leader's sequence id.
//   required int64 term = 1;
//   required int64 index = 2;
// }


// probably wrong abstraction here
message RequestForVoteReply {
 uint64 term = 1;
 bool vote_granted = 2;
}

message RequestForVoteArgs {
  uint64 term = 1;
  uint64 candidate_id = 2;
  uint64 last_log_index = 3;
  uint64 last_log_term = 4;

  // optional uint64 originating_server_id;
}
message AppendEntriesArgs {
  uint64 term = 1;
  uint64 leader_id = 2;
  uint64 prev_log_index_id = 3;
  uint64 prev_log_term = 4;
  uint64 leader_commit_id = 5;
  repeated Entry entries = 6;
}
message AppendEntriesReply {
  uint64 term = 1;
  bool success = 2;
}

service Raft {
  rpc RequestForVote(RequestForVoteArgs) returns (RequestForVoteReply) {
    // Invoked by candidates to gather votes (§5.2).
    // Arguments:
    // term candidate’s term
    // candidateId candidate requesting vote
    // lastLogIndex index of candidate’s last log entry (§5.4)
    // lastLogTerm term of candidate’s last log entry (§5.4)
    // Results:
    // term currentTerm, for candidate to update itself
    // voteGranted true means candidate received vote
    // Receiver implementation:
    // 1. Reply false if term < currentTerm (§5.1)
    // 2. If votedFor is null or candidateId, and candidate’s log is at
    // least as up-to-date as receiver’s log, grant vote (§5.2, §5.4)
  }
  rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesReply) {
    // Receiver implementation:
    // 1. Reply false if term < currentTerm (§5.1)
    // 2. Reply false if log doesn’t contain an entry at prevLogIndex
    //   whose term matches prevLogTerm (§5.3)
    // 3. If an existing entry conflicts with a new one (same index
    //   but different terms), delete the existing entry and all that
    //   follow it (§5.3)
    // 4. Append any new entries not already in the log
    // 5. If leaderCommit > commitIndex, set commitIndex =
    //   min(leaderCommit, index of last new entry)
  }
}
