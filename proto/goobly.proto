syntax = "proto3";
option java_package = "goobly.grpc";
option objc_class_prefix = "GBLY";
option optimize_for = SPEED;
option cc_enable_arenas = true;
package goobly;

import "common.proto";

message ScanReply {
  // scans | gets
  repeated Entry entries = 1;
}

message ScanRequest {
  message Range {
    // a get is where the end key is not set or the same
    bytes key_start = 1;
    bytes key_end = 2;
    // if set. then start at key_start and up to this limit
    uint32 limit = 3;
  }
  repeated Range scan = 1;
}

message PutRequest {
  repeated Entry entry = 1;
}

message DeleteRequest {
  repeated bytes keys = 1;
}

message StateError {
  bool wut = 1; // here until i can figure out how to have void rpc
}

// Because GRPC uses 'HTTP2' status code with
// every reply, there is no need to encode
// a 'message Status' in every reply. This is implicit and convenient
//
service State {
  rpc scan(ScanRequest) returns (ScanReply);
  rpc put(PutRequest) returns (StateError);
  rpc delete(DeleteRequest) returns (StateError);
}
