syntax = "proto3";
option java_package = "goobly.grpc";
option objc_class_prefix = "GBLY";
option optimize_for = SPEED;
option cc_enable_arenas = true;
// https://developers.google.com/protocol-buffers/docs/proto?hl=en#services
// recommendation is to run with these as false for new projects
option cc_generic_services = false;
option java_generic_services = false;
option py_generic_services = false;


package goobly;

import "common.proto";

message ScanReply {
  // scans | gets
  repeated Entry entries = 2;
}

message ScanRequest {
  message Range {
    string table = 1;
    // a get is where the end key is not set or the same
    bytes key_start = 2;
    bytes key_end = 3;
    // if set. then start at key_start and up to this limit
    uint32 limit = 4;
  }
  repeated Range scan = 2;
}

message PutRequest {
  string table = 1;
  repeated Entry entry = 2;
}

message DeleteRequest {
  string table = 1;
  repeated bytes keys = 2;
}

// GRPC: Does not support empty return, aka void
//
// https://groups.google.com/forum/#!topic/protobuf/4SCxInAktSc
// The standard is to provide a 'void' type per RPC for future compat
//
message PutReply {}
message DeleteReply{}


// Because GRPC uses 'HTTP2' status code with
// every reply, there is no need to encode
// a 'message Status' in every reply. This is implicit and convenient
//
service State {
  rpc scan(ScanRequest) returns (ScanReply);
  rpc put(PutRequest) returns (PutReply);
  rpc del(DeleteRequest) returns (DeleteReply);
}
